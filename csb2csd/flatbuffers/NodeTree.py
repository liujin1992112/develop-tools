# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class NodeTree(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsNodeTree(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = NodeTree()
        x.Init(buf, n + offset)
        return x

    # NodeTree
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # NodeTree
    def Classname(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # NodeTree
    def Children(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .NodeTree import NodeTree
            obj = NodeTree()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeTree
    def ChildrenLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # NodeTree
    def Options(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Options import Options
            obj = Options()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # NodeTree
    def CustomClassName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def NodeTreeStart(builder): builder.StartObject(4)
def NodeTreeAddClassname(builder, classname): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(classname), 0)
def NodeTreeAddChildren(builder, children): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(children), 0)
def NodeTreeStartChildrenVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def NodeTreeAddOptions(builder, options): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(options), 0)
def NodeTreeAddCustomClassName(builder, customClassName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(customClassName), 0)
def NodeTreeEnd(builder): return builder.EndObject()
