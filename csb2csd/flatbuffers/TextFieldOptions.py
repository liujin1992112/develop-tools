# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class TextFieldOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTextFieldOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TextFieldOptions()
        x.Init(buf, n + offset)
        return x

    # TextFieldOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TextFieldOptions
    def WidgetOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .WidgetOptions import WidgetOptions
            obj = WidgetOptions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TextFieldOptions
    def FontResource(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ResourceData import ResourceData
            obj = ResourceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TextFieldOptions
    def FontName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextFieldOptions
    def FontSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextFieldOptions
    def Text(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextFieldOptions
    def PlaceHolder(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextFieldOptions
    def PasswordEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextFieldOptions
    def PasswordStyleText(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TextFieldOptions
    def MaxLengthEnabled(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextFieldOptions
    def MaxLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextFieldOptions
    def AreaWidth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextFieldOptions
    def AreaHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TextFieldOptions
    def IsCustomSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # TextFieldOptions
    def IsLocalized(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def TextFieldOptionsStart(builder): builder.StartObject(14)
def TextFieldOptionsAddWidgetOptions(builder, widgetOptions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(widgetOptions), 0)
def TextFieldOptionsAddFontResource(builder, fontResource): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fontResource), 0)
def TextFieldOptionsAddFontName(builder, fontName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(fontName), 0)
def TextFieldOptionsAddFontSize(builder, fontSize): builder.PrependInt32Slot(3, fontSize, 0)
def TextFieldOptionsAddText(builder, text): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(text), 0)
def TextFieldOptionsAddPlaceHolder(builder, placeHolder): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(placeHolder), 0)
def TextFieldOptionsAddPasswordEnabled(builder, passwordEnabled): builder.PrependBoolSlot(6, passwordEnabled, 0)
def TextFieldOptionsAddPasswordStyleText(builder, passwordStyleText): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(passwordStyleText), 0)
def TextFieldOptionsAddMaxLengthEnabled(builder, maxLengthEnabled): builder.PrependBoolSlot(8, maxLengthEnabled, 0)
def TextFieldOptionsAddMaxLength(builder, maxLength): builder.PrependInt32Slot(9, maxLength, 0)
def TextFieldOptionsAddAreaWidth(builder, areaWidth): builder.PrependInt32Slot(10, areaWidth, 0)
def TextFieldOptionsAddAreaHeight(builder, areaHeight): builder.PrependInt32Slot(11, areaHeight, 0)
def TextFieldOptionsAddIsCustomSize(builder, isCustomSize): builder.PrependBoolSlot(12, isCustomSize, 0)
def TextFieldOptionsAddIsLocalized(builder, isLocalized): builder.PrependBoolSlot(13, isLocalized, 0)
def TextFieldOptionsEnd(builder): return builder.EndObject()
