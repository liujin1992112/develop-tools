# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class BoneNodeOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBoneNodeOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoneNodeOptions()
        x.Init(buf, n + offset)
        return x

    # BoneNodeOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoneNodeOptions
    def NodeOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .WidgetOptions import WidgetOptions
            obj = WidgetOptions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # BoneNodeOptions
    def Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # BoneNodeOptions
    def BlendFunc(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .BlendFunc import BlendFunc
            obj = BlendFunc()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoneNodeOptionsStart(builder): builder.StartObject(3)
def BoneNodeOptionsAddNodeOptions(builder, nodeOptions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeOptions), 0)
def BoneNodeOptionsAddLength(builder, length): builder.PrependFloat32Slot(1, length, 0.0)
def BoneNodeOptionsAddBlendFunc(builder, blendFunc): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(blendFunc), 0)
def BoneNodeOptionsEnd(builder): return builder.EndObject()
