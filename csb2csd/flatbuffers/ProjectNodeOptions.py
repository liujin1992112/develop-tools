# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class ProjectNodeOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProjectNodeOptions(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProjectNodeOptions()
        x.Init(buf, n + offset)
        return x

    # ProjectNodeOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProjectNodeOptions
    def NodeOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .WidgetOptions import WidgetOptions
            obj = WidgetOptions()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ProjectNodeOptions
    def FileName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProjectNodeOptions
    def InnerActionSpeed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def ProjectNodeOptionsStart(builder): builder.StartObject(3)
def ProjectNodeOptionsAddNodeOptions(builder, nodeOptions): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeOptions), 0)
def ProjectNodeOptionsAddFileName(builder, fileName): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(fileName), 0)
def ProjectNodeOptionsAddInnerActionSpeed(builder, innerActionSpeed): builder.PrependFloat32Slot(2, innerActionSpeed, 0.0)
def ProjectNodeOptionsEnd(builder): return builder.EndObject()
