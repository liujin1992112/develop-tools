# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class BoolFrame(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsBoolFrame(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = BoolFrame()
        x.Init(buf, n + offset)
        return x

    # BoolFrame
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # BoolFrame
    def FrameIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # BoolFrame
    def Tween(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return True

    # BoolFrame
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # BoolFrame
    def EasingData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .EasingData import EasingData
            obj = EasingData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def BoolFrameStart(builder): builder.StartObject(4)
def BoolFrameAddFrameIndex(builder, frameIndex): builder.PrependInt32Slot(0, frameIndex, 0)
def BoolFrameAddTween(builder, tween): builder.PrependBoolSlot(1, tween, 1)
def BoolFrameAddValue(builder, value): builder.PrependBoolSlot(2, value, 1)
def BoolFrameAddEasingData(builder, easingData): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(easingData), 0)
def BoolFrameEnd(builder): return builder.EndObject()
